{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/divya%20mulchandani/OneDrive/Documents/RRU/cleaness/quiz-app/src/app/api/generate-certificate/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { PDFDocument } from 'pdf-lib';\nimport { createCanvas, loadImage } from 'canvas';\nimport path from 'path';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { name } = body;\n\n    // Load the certificate template image\n    const templatePath = path.join(process.cwd(), 'src/app/api/generate-certificate/certi.png');\n    const templateImage = await loadImage(templatePath);\n    \n    // Create canvas to modify the image\n    const canvas = createCanvas(templateImage.width, templateImage.height);\n    const ctx = canvas.getContext('2d');\n    \n    // Draw the template image\n    ctx.drawImage(templateImage, 0, 0);\n    \n    // Set up text rendering properties\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    \n    // Use basic sans-serif font\n    ctx.font = 'bold 50px sans-serif';\n    ctx.fillStyle = '#000000'; // Navy blue color\n    \n    // Calculate position for the name\n    const nameX = canvas.width / 2;\n    const nameY = canvas.height * 0.56;\n    \n    // Create text with outline for better visibility\n    const text = name.toUpperCase();\n    \n    // Draw white outline\n    ctx.strokeStyle = 'white';\n    ctx.lineWidth = 8;\n    ctx.strokeText(text, nameX, nameY);\n    \n    // Draw text\n    ctx.fillText(text, nameX, nameY);\n    \n    // Log for debugging\n    console.log('Drawing text:', {\n      text,\n      position: { x: nameX, y: nameY },\n      canvasSize: { width: canvas.width, height: canvas.height }\n    });\n    \n    // Reset shadow\n    ctx.shadowColor = 'transparent';\n    \n    // Convert canvas to image buffer\n    const imageBuffer = canvas.toBuffer('image/png');\n    \n    // Create PDF document\n    const pdfDoc = await PDFDocument.create();\n    const page = pdfDoc.addPage([842, 595]); // Landscape A4 size\n    \n    // Embed the modified image\n    const image = await pdfDoc.embedPng(imageBuffer);\n    \n    // Draw the image on the PDF page\n    page.drawImage(image, {\n      x: 0,\n      y: 0,\n      width: 842,\n      height: 595,\n    });\n\n    // Serialize the PDF\n    const pdfBytes = await pdfDoc.save();\n\n    // Return the PDF as a response\n    return new NextResponse(Buffer.from(pdfBytes), {\n      headers: {\n        'Content-Type': 'application/pdf',\n        'Content-Disposition': `attachment; filename=\"Swachhata-Certificate-${name.replace(/\\s+/g, '-')}.pdf\"`,\n      },\n    });\n  } catch (error) {\n    console.error('Error generating certificate:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to generate certificate' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,GAAG;QAEjB,sCAAsC;QACtC,MAAM,eAAe,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC9C,MAAM,gBAAgB,MAAM,IAAA,kHAAS,EAAC;QAEtC,oCAAoC;QACpC,MAAM,SAAS,IAAA,qHAAY,EAAC,cAAc,KAAK,EAAE,cAAc,MAAM;QACrE,MAAM,MAAM,OAAO,UAAU,CAAC;QAE9B,0BAA0B;QAC1B,IAAI,SAAS,CAAC,eAAe,GAAG;QAEhC,mCAAmC;QACnC,IAAI,SAAS,GAAG;QAChB,IAAI,YAAY,GAAG;QAEnB,4BAA4B;QAC5B,IAAI,IAAI,GAAG;QACX,IAAI,SAAS,GAAG,WAAW,kBAAkB;QAE7C,kCAAkC;QAClC,MAAM,QAAQ,OAAO,KAAK,GAAG;QAC7B,MAAM,QAAQ,OAAO,MAAM,GAAG;QAE9B,iDAAiD;QACjD,MAAM,OAAO,KAAK,WAAW;QAE7B,qBAAqB;QACrB,IAAI,WAAW,GAAG;QAClB,IAAI,SAAS,GAAG;QAChB,IAAI,UAAU,CAAC,MAAM,OAAO;QAE5B,YAAY;QACZ,IAAI,QAAQ,CAAC,MAAM,OAAO;QAE1B,oBAAoB;QACpB,QAAQ,GAAG,CAAC,iBAAiB;YAC3B;YACA,UAAU;gBAAE,GAAG;gBAAO,GAAG;YAAM;YAC/B,YAAY;gBAAE,OAAO,OAAO,KAAK;gBAAE,QAAQ,OAAO,MAAM;YAAC;QAC3D;QAEA,eAAe;QACf,IAAI,WAAW,GAAG;QAElB,iCAAiC;QACjC,MAAM,cAAc,OAAO,QAAQ,CAAC;QAEpC,sBAAsB;QACtB,MAAM,SAAS,MAAM,gLAAW,CAAC,MAAM;QACvC,MAAM,OAAO,OAAO,OAAO,CAAC;YAAC;YAAK;SAAI,GAAG,oBAAoB;QAE7D,2BAA2B;QAC3B,MAAM,QAAQ,MAAM,OAAO,QAAQ,CAAC;QAEpC,iCAAiC;QACjC,KAAK,SAAS,CAAC,OAAO;YACpB,GAAG;YACH,GAAG;YACH,OAAO;YACP,QAAQ;QACV;QAEA,oBAAoB;QACpB,MAAM,WAAW,MAAM,OAAO,IAAI;QAElC,+BAA+B;QAC/B,OAAO,IAAI,+JAAY,CAAC,OAAO,IAAI,CAAC,WAAW;YAC7C,SAAS;gBACP,gBAAgB;gBAChB,uBAAuB,CAAC,4CAA4C,EAAE,KAAK,OAAO,CAAC,QAAQ,KAAK,KAAK,CAAC;YACxG;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,OAAO,+JAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAiC,GAC1D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}